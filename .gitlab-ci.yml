workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == "develop"

variables:
  POSTGRES_DB: mydatabase
  POSTGRES_USER: myuser
  POSTGRES_PASSWORD: mypassword
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432
  DATABASE_URL: "postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DB"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"

default:
  image: python:3.12-slim-bookworm

# Define pipeline stages
stages:
  - setup
  - test
  - lint
  - security
  - deploy

# Cache pip dependencies between jobs
cache:
  paths:
    - .pip-cache/
    - env/

# Install dependencies and set up virtual environment
setup:
  stage: setup
  script:
    - apt-get update && apt-get install -y python3-venv python3-dev postgresql postgresql-contrib libpq-dev build-essential
    - python3 -m venv env
    - source env/bin/activate
    - pip install -U pip
    - pip install -r requirements/local.txt
  artifacts:
    paths:
      - env/

    expire_in: 1 hour

# Run unit tests
test:
  stage: test
  services:
    - postgres:latest
  before_script:
    - apt-get update && apt-get install -y postgresql-client
    - source env/bin/activate
    - python manage.py migrate
  script:
    - coverage run -m pytest --junitxml=test-results/junit.xml
    - coverage report
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: test-results/junit.xml
    paths:
      - test-results/

# Run code linting
lint:
  stage: lint
  script:
    - source env/bin/activate
    - isort . --check-only
    - black . --check
    - flake8 .

# Security checks
security:
  stage: security
  before_script:
    - source env/bin/activate
    - pip install bandit safety
  script:
    - bandit -r . --exclude './env,./tests,./migrations'
    - safety check --full-report

# Deploy to staging
deploy_staging:
  stage: deploy
  before_script:
  - "command -v ssh-agent >/dev/null || ( apt-get update && apt-get install -y openssh-client )"
  - apt-get update && apt-get install -y rsync
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY_STAGING" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan $STAGING_SERVER_IP >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  script:
    - source env/bin/activate || exit 1
    - export DJANGO_SETTINGS_MODULE=miran.settings.production
    - pip install -r requirements.txt || exit 1
    - python manage.py migrate || exit 1
    - python manage.py update_translation_fields || exit 1
    - sudo supervisorctl restart miran || exit 1
  environment:
    name: staging
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"
      when: on_success

# Deploy to production
deploy_production:
  stage: deploy
  before_script:
  - "command -v ssh-agent >/dev/null || ( apt-get update && apt-get install -y openssh-client )"
  - apt-get update && apt-get install -y rsync
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY_PRODUCTION" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan $PRODUCTION_SERVER_IP >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  script:
    - source env/bin/activate || exit 1

    - export DJANGO_SETTINGS_MODULE=miran.settings.production
    - pip install -r requirements.txt || exit 1
    - python manage.py migrate || exit 1
    - python manage.py update_translation_fields || exit 1
    - sudo supervisorctl restart miran || exit 1
  environment:
    name: production
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
      when: manual